
Design

Initialize

Create our scheduler
-pretty much an array of queues. Index is priority level
-get the context of main
-get, make context for our signal handler(do we need it?)
-set our timer using itimerval

pthread create
-set up our tcb
-create a context for the thread that points to the function user passed
-enqueue into our scheduler at priority 0
-*for now raise SIGALRM to test scheduler

signal handler
-go through each priority level and take a certain amount(tbd) of
threads and put it into a running queue.
-while there are threads in the running queue,
dequeue thread
swap to that thread context for tbd time slice(are we swapping from main context to running thread?)

2 cases
if (interrupted)
-goes into signal handler(beginning?)
-thread is not done running.
-enqueue back into scheduler down a priority level
-we are still in the context of that running thread.
what should we do
swap back to main?
-I think this would go back to the while loop that is dequeuing running queue
swap to another thread?
-could just dequeue from running queue and swap to that next thread




else(pthread exit)
//use wrapper function to make sure thread exits
-enqueue into our done queue in case another thread is waiting on finished thread

1.When the running thread gets interrupted, our signal handler
gets called. What context are we in? When we swap back to
that thread will it continue where it left off?

2.How many threads should we be able to handle.

3.Why is our context restarting?

4.What happens at the end of our scheduler?
