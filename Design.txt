
Design

Initialize

Create our scheduler
-pretty much an array of queues. Index is priority level
-get the context of main
-put that in our scheduler
-get,make context for garbage collector
-make all threads go there after finishing
-get, make context for our signal handler(do we need it?)
-set our timer using itimerval

pthread create
-set up our tcb
-create a context for the thread that points to the function user passed
-enqueue into our scheduler at priority 0
-*for now raise SIGALRM to test scheduler

signal handler
-go through each priority level and take a certain amount(tbd) of
threads and put it into a running queue.
-while there are threads in the running queue,
dequeue thread
swap to that thread context for tbd time slice(are we swapping from main context to running thread?)

-first swap
-have main swap to the first thread created.

2 cases
if (interrupted by timer run out)
-goes into signal handler(beginning?)
-thread is not done running.
-enqueue back into scheduler down a priority level
-we are still in the context of that running thread.


else(interrupted by pthread exit)
//use wrapper function to make sure thread exits
-enqueue into our done queue in case another thread is waiting on finished thread
-change tcb to terminated


else(interrupted by pthread yield)
else(interrupted by function running out or return)

1.When the running thread gets interrupted, our signal handler
gets called. What context are we in? When we swap back to
that thread will it continue where it left off?

2.How many threads should we be able to handle.

3.What happens at the end of our scheduler?

4.SIGVTALRM? raising handler in handler

5.How to get main context?

6.Will our dummy functions always go to garbage? Is wrapper function required?

7.If they don't call pthread_exit what is our value_ptr?

8.Should we raise an alarm after every create?

9.Will user call pthread_yield?

10. How to do atomics? Give us code sample.
